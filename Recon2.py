import streamlit as st
import os
import zipfile
import tempfile
from pathlib import Path
from PIL import Image
try:
    import pillow_heif
    pillow_heif.register_heif_opener()
    HEIF_SUPPORT = True
except ImportError:
    HEIF_SUPPORT = False
    st.warning("–î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ HEIC/HEIF —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞–∫–µ—Ç pillow-heif: pip install pillow-heif")
import shutil
from io import BytesIO

pillow_heif.register_heif_opener()

SUPPORTED_EXTS = ('.jpg', '.jpeg', '.png', '.bmp', '.webp', '.tiff', '.heic', '.heif')

st.set_page_config(page_title="PhotoFlow: –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
st.title("PhotoFlow: –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

with st.expander("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"):
    st.markdown("""
    **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**
    1. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã.
    2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –∞—Ä—Ö–∏–≤.
    3. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —Å–∫–∞—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

    **FAQ:**
    - *–ü–æ—á–µ–º—É –Ω–µ –≤—Å–µ —Ñ–æ—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏—Å—å?*  
      –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –±—ã–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.
    - *–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –∞—Ä—Ö–∏–≤ –Ω–µ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è?*  
      –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞ –∏–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Ñ–∞–π–ª—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π.
    """)

if "reset_uploader" not in st.session_state:
    st.session_state["reset_uploader"] = 0
if "log" not in st.session_state:
    st.session_state["log"] = []
if "result_zip" not in st.session_state:
    st.session_state["result_zip"] = None
if "stats" not in st.session_state:
    st.session_state["stats"] = {}
if "mode" not in st.session_state:
    st.session_state["mode"] = "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ"

def reset_all():
    st.session_state["reset_uploader"] += 1
    st.session_state["log"] = []
    st.session_state["result_zip"] = None
    st.session_state["stats"] = {}
    st.session_state["mode"] = "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ"

mode = st.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
    ["–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ", "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ JPG", "–í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫"],
    index=0 if st.session_state["mode"] == "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ" else (1 if st.session_state["mode"] == "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ JPG" else 2),
    key="mode_radio",
    on_change=lambda: st.session_state.update({"log": [], "result_zip": None, "stats": {}})
)
st.session_state["mode"] = mode

st.markdown(
    """
    <span style='color:#888;'>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –∞—Ä—Ö–∏–≤ –Ω–∞ –æ–±–ª–∞—Å—Ç—å –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä—É—á–Ω—É—é</span>
    """,
    unsafe_allow_html=True
)

uploaded_files = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –∞—Ä—Ö–∏–≤ (–¥–æ 1 –ì–ë, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è JPG, PNG, HEIC, ZIP –∏ –¥—Ä.)",
    type=["jpg", "jpeg", "png", "bmp", "webp", "tiff", "heic", "heif", "zip"],
    accept_multiple_files=True,
    key=st.session_state["reset_uploader"]
)

# --- UI –¥–ª—è —Ä–µ–∂–∏–º–∞ –í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ ---
if mode == "–í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫":
    st.markdown("**–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫:**")
    import glob
    from water import apply_watermark
    # –ü–∞–ø–∫–∞ —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –≤–æ–¥—è–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏
    watermark_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), "watermarks"))
    st.write("–¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:", os.getcwd())
    st.write("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ watermarks:", os.listdir(watermark_dir) if os.path.exists(watermark_dir) else "–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    preset_files = glob.glob(os.path.join(watermark_dir, "*.png")) if os.path.exists(watermark_dir) else []
    preset_names = [os.path.basename(f) for f in preset_files]
    preset_choice = st.selectbox("–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ", ["–ù–µ—Ç"] + preset_names)
    user_wm_file = st.file_uploader("–ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–π PNG-–≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫", type=["png"], key="user_wm")
    user_wm_bytes = None
    user_wm_path = None
    user_wm_filename = None
    if user_wm_file is not None:
        user_wm_bytes = user_wm_file.read()
        user_wm_filename = user_wm_file.name
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        tmp_dir = tempfile.gettempdir()
        user_wm_path = os.path.join(tmp_dir, f"user_wm_{user_wm_filename}")
        with open(user_wm_path, "wb") as f:
            f.write(user_wm_bytes)
    st.markdown("**–ò–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫:**")
    text_wm = st.text_input("–¢–µ–∫—Å—Ç –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞", "")
    col1, col2 = st.columns(2)
    with col1:
        text_color = st.color_picker("–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞", "#FFFFFF")
    with col2:
        text_size = st.slider("–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞", 10, 120, 36)
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
    st.markdown("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞:**")
    col1, col2, col3 = st.columns(3)
    with col1:
        position = st.selectbox("–ü–æ–∑–∏—Ü–∏—è", [
            ("–õ–µ–≤—ã–π –≤–µ—Ä—Ö", "top_left"),
            ("–ü—Ä–∞–≤—ã–π –≤–µ—Ä—Ö", "top_right"),
            ("–¶–µ–Ω—Ç—Ä", "center"),
            ("–õ–µ–≤—ã–π –Ω–∏–∑", "bottom_left"),
            ("–ü—Ä–∞–≤—ã–π –Ω–∏–∑", "bottom_right")
        ], format_func=lambda x: x[0])[1]
    with col2:
        opacity = st.slider("–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å", 0, 100, 50) / 100.0
    with col3:
        scale = st.slider("–ú–∞—Å—à—Ç–∞–± (% –æ—Ç —à–∏—Ä–∏–Ω—ã)", 5, 50, 20) / 100.0

    # --- –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ ---
    st.markdown("**–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞:**")
    preview_img = None
    if uploaded_files:
        try:
            preview_file = uploaded_files[0]
            preview_img = Image.open(preview_file)
        except Exception:
            preview_img = Image.new("RGB", (400, 300), (200, 200, 200))
    else:
        preview_img = Image.new("RGB", (400, 300), (200, 200, 200))
    wm_path = None
    if preset_choice != "–ù–µ—Ç":
        wm_path = os.path.join(watermark_dir, preset_choice)
    elif user_wm_path:
        wm_path = user_wm_path
    text_opts = {
        "font_size": text_size,
        "color": tuple(int(text_color.lstrip('#')[i:i+2], 16) for i in (0, 2, 4)) + (int(255 * opacity),)
    }
    try:
        if wm_path:
            preview = apply_watermark(preview_img, watermark_path=wm_path, position=position, opacity=opacity, scale=scale)
        elif text_wm:
            preview = apply_watermark(preview_img, text=text_wm, position=position, opacity=opacity, scale=scale, text_options=text_opts)
        else:
            preview = preview_img
        st.image(preview, caption="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", use_column_width=True)
    except Exception as e:
        st.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")

if st.button("üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", type="primary"):
    reset_all()
    st.rerun()

MAX_SIZE_MB = 3072
MAX_SIZE_BYTES = MAX_SIZE_MB * 1024 * 1024

if uploaded_files and not st.session_state["result_zip"]:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤
    oversize = [f for f in uploaded_files if hasattr(f, 'size') and f.size > MAX_SIZE_BYTES]
    if oversize:
        st.error(f"–§–∞–π–ª(—ã) –ø—Ä–µ–≤—ã—à–∞—é—Ç –ª–∏–º–∏—Ç {MAX_SIZE_MB} –ú–ë: {[f.name for f in oversize]}")
    else:
        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤..."):
            with tempfile.TemporaryDirectory() as temp_dir:
                all_images = []
                log = st.session_state.get("log", []).copy()
                # --- –°–±–æ—Ä –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ ---
                for uploaded in uploaded_files:
                    if hasattr(uploaded, 'size') and uploaded.size > MAX_SIZE_BYTES:
                        log.append(f"‚ùå {uploaded.name}: –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç {MAX_SIZE_MB} –ú–ë.")
                        continue
                    if uploaded.name.lower().endswith(".zip"):
                        zip_temp = os.path.join(temp_dir, uploaded.name)
                        with open(zip_temp, "wb") as f:
                            f.write(uploaded.read())
                        with zipfile.ZipFile(zip_temp, "r") as zip_ref:
                            zip_ref.extractall(temp_dir)
                        extracted = [file for file in Path(temp_dir).rglob("*") if file.is_file() and file.suffix.lower() in SUPPORTED_EXTS]
                        log.append(f"üì¶ –ê—Ä—Ö–∏–≤ {uploaded.name}: –Ω–∞–π–¥–µ–Ω–æ {len(extracted)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
                        all_images.extend(extracted)
                    elif uploaded.name.lower().endswith(SUPPORTED_EXTS):
                        img_temp = os.path.join(temp_dir, uploaded.name)
                        with open(img_temp, "wb") as f:
                            f.write(uploaded.read())
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                        if os.path.getsize(img_temp) == 0:
                            log.append(f"‚ùå {uploaded.name}: —Ñ–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Å –Ω—É–ª–µ–≤—ã–º —Ä–∞–∑–º–µ—Ä–æ–º!")
                        else:
                            log.append(f"üñºÔ∏è –§–∞–π–ª {uploaded.name}: –¥–æ–±–∞–≤–ª–µ–Ω, —Ä–∞–∑–º–µ—Ä: {os.path.getsize(img_temp)} –±–∞–π—Ç.")
                        all_images.append(Path(img_temp))
                    else:
                        log.append(f"‚ùå {uploaded.name}: –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
                if not all_images:
                    st.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                else:
                    if mode == "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ":
                        exts = SUPPORTED_EXTS
                        renamed = 0
                        skipped = 0
                        folders = sorted({img.parent for img in all_images})
                        progress_bar = st.progress(0, text="–ü–∞–ø–∫–∏...")
                        for i, folder in enumerate(folders):
                            photos = [f for f in folder.iterdir() if f.is_file() and f.suffix.lower() in exts]
                            relative_folder_path = folder.relative_to(temp_dir)
                            if len(photos) > 0:
                                for idx, photo in enumerate(sorted(photos), 1):
                                    new_name = f"{idx}{photo.suffix.lower()}"
                                    new_path = photo.parent / new_name
                                    relative_photo_path = photo.relative_to(temp_dir)
                                    relative_new_path = new_path.relative_to(temp_dir)
                                    if new_path.exists() and new_path != photo:
                                        log.append(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: –§–∞–π–ª '{relative_new_path}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                                        skipped += 1
                                    else:
                                        photo.rename(new_path)
                                        log.append(f"–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: '{relative_photo_path}' -> '{relative_new_path}'")
                                        renamed += 1
                            else:
                                log.append(f"–ò–Ω—Ñ–æ: –í –ø–∞–ø–∫–µ '{relative_folder_path}' –Ω–µ—Ç —Ñ–æ—Ç–æ.")
                                skipped += 1
                            progress_bar.progress((i + 1) / len(folders), text=f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞–ø–æ–∫: {i + 1}/{len(folders)}")
                        extracted_items = [p for p in Path(temp_dir).iterdir() if p.name != uploaded_files[0].name]
                        zip_root = Path(temp_dir)
                        if len(extracted_items) == 1 and extracted_items[0].is_dir():
                            zip_root = extracted_items[0]
                        result_zip = os.path.join(temp_dir, "result_rename.zip")
                        shutil.make_archive(base_name=result_zip[:-4], format='zip', root_dir=str(zip_root))
                        with open(result_zip, "rb") as f:
                            st.session_state["result_zip"] = f.read()
                        st.session_state["stats"] = {
                            "total": len(all_images),
                            "renamed": renamed,
                            "skipped": skipped
                        }
                        st.session_state["log"] = log
                    elif mode == "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ JPG":
                        converted_files = []
                        errors = 0
                        progress_bar = st.progress(0, text="–§–∞–π–ª—ã...")
                        for i, img_path in enumerate(all_images, 1):
                            rel_path = img_path.relative_to(temp_dir)
                            out_path = os.path.join(temp_dir, str(rel_path.with_suffix('.jpg')))
                            out_dir = os.path.dirname(out_path)
                            os.makedirs(out_dir, exist_ok=True)
                            try:
                                img = Image.open(img_path)
                                icc_profile = img.info.get('icc_profile')
                                img = img.convert("RGB")
                                img.save(out_path, "JPEG", quality=100, optimize=True, progressive=True, icc_profile=icc_profile)
                                converted_files.append((out_path, rel_path.with_suffix('.jpg')))
                                log.append(f"‚úÖ {rel_path} ‚Üí {rel_path.with_suffix('.jpg')}")
                            except Exception as e:
                                log.append(f"‚ùå {rel_path}: –æ—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ({e})")
                                errors += 1
                            progress_bar.progress(i / len(all_images), text=f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {i}/{len(all_images)}")
                        if converted_files:
                            result_zip = os.path.join(temp_dir, "result_convert.zip")
                            with zipfile.ZipFile(result_zip, "w") as zipf:
                                for src, rel in converted_files:
                                    zipf.write(src, arcname=rel)
                            with open(result_zip, "rb") as f:
                                st.session_state["result_zip"] = f.read()
                            st.session_state["stats"] = {
                                "total": len(all_images),
                                "converted": len(converted_files),
                                "errors": errors
                            }
                            st.session_state["log"] = log
                        else:
                            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                            st.session_state["log"] = log
                    elif mode == "–í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫":
                        log = st.session_state.get("log", []).copy()
                        processed_files = []
                        errors = 0
                        progress_bar = st.progress(0, text="–§–∞–π–ª—ã...")
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
                        wm_path = None
                        user_wm_path = None
                        if preset_choice != "–ù–µ—Ç":
                            wm_path = os.path.join(watermark_dir, preset_choice)
                        elif user_wm_bytes and user_wm_filename:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                            tmp_dir = tempfile.gettempdir()
                            user_wm_path = os.path.join(tmp_dir, f"user_wm_{user_wm_filename}")
                            with open(user_wm_path, "wb") as f:
                                f.write(user_wm_bytes)
                            wm_path = user_wm_path
                        elif text_wm:
                            pass  # —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ—Ç–µ—Ä–º–∞—Ä–∫
                        else:
                            st.error("–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç!")
                            log.append("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω –Ω–∏ –æ–¥–∏–Ω –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
                            st.session_state["log"] = log
                            st.session_state["stats"] = {"total": len(all_images), "processed": 0, "errors": len(all_images)}
                            st.stop()
                        text_opts = {
                            "font_size": text_size,
                            "color": tuple(int(text_color.lstrip('#')[i:i+2], 16) for i in (0, 2, 4)) + (int(255 * opacity),)
                        }
                        for i, img_path in enumerate(all_images, 1):
                            rel_path = img_path.relative_to(temp_dir)
                            out_path = os.path.join(temp_dir, str(rel_path.with_suffix('.jpg')))
                            out_dir = os.path.dirname(out_path)
                            os.makedirs(out_dir, exist_ok=True)
                            try:
                                img = Image.open(img_path)
                                # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ PNG
                                if wm_path:
                                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                                    actual_files = os.listdir(os.path.dirname(wm_path))
                                    if os.path.basename(wm_path) not in actual_files:
                                        log.append(f"‚ùå {rel_path}: —Ñ–∞–π–ª –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ {wm_path} –Ω–µ –Ω–∞–π–¥–µ–Ω (–ø—Ä–æ–≤–µ—Ä—å —Ä–µ–≥–∏—Å—Ç—Ä –∏–º–µ–Ω–∏)")
                                        errors += 1
                                        continue
                                    if not os.path.exists(wm_path):
                                        log.append(f"‚ùå {rel_path}: —Ñ–∞–π–ª –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {wm_path}")
                                        errors += 1
                                        continue
                                    elif os.path.getsize(wm_path) == 0:
                                        log.append(f"‚ùå {rel_path}: —Ñ–∞–π–ª –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –ø—É—Å—Ç–æ–π: {wm_path}")
                                        errors += 1
                                        continue
                                    else:
                                        log.append(f"‚úÖ –í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –Ω–∞–π–¥–µ–Ω: {wm_path}, —Ä–∞–∑–º–µ—Ä: {os.path.getsize(wm_path)} –±–∞–π—Ç")
                                        try:
                                            with Image.open(wm_path) as test_img:
                                                test_img.verify()
                                        except Exception as e:
                                            log.append(f"‚ùå {rel_path}: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ {wm_path}: {e}")
                                            errors += 1
                                            continue
                                    result = apply_watermark(img, watermark_path=wm_path, position=position, opacity=opacity, scale=scale)
                                elif text_wm:
                                    result = apply_watermark(img, text=text_wm, position=position, opacity=opacity, scale=scale, text_options=text_opts)
                                else:
                                    log.append(f"‚ùå {rel_path}: –Ω–µ –≤—ã–±—Ä–∞–Ω –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫")
                                    errors += 1
                                    continue
                                result = result.convert("RGB")  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º RGB –¥–ª—è JPEG
                                result.save(out_path, "JPEG", quality=100, optimize=True, progressive=True)
                                processed_files.append((out_path, rel_path.with_suffix('.jpg')))
                                log.append(f"‚úÖ {rel_path} ‚Üí {rel_path.with_suffix('.jpg')}")
                            except Exception as e:
                                log.append(f"‚ùå {rel_path}: –æ—à–∏–±–∫–∞ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ ({e})")
                                errors += 1
                            progress_bar.progress(i / len(all_images), text=f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {i}/{len(all_images)}")
                        if processed_files:
                            result_zip = os.path.join(temp_dir, "result_watermark.zip")
                            with zipfile.ZipFile(result_zip, "w") as zipf:
                                for src, rel in processed_files:
                                    zipf.write(src, arcname=rel)
                            with open(result_zip, "rb") as f:
                                st.session_state["result_zip"] = f.read()
                            st.session_state["stats"] = {
                                "total": len(all_images),
                                "processed": len(processed_files),
                                "errors": errors
                            }
                            st.session_state["log"] = log
                        else:
                            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                            st.session_state["log"] = log
                            st.write(log)  # –í—ã–≤–æ–¥–∏–º –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

if st.session_state["result_zip"]:
    stats = st.session_state["stats"]
    mode = st.session_state["mode"]
    # --- –ù–æ–≤—ã–π –±–ª–æ–∫: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–æ—Å–æ–± —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ---
    DOWNLOADS_DIR = "downloads"
    os.makedirs(DOWNLOADS_DIR, exist_ok=True)
    result_filename = None
    if mode == "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ":
        result_filename = "renamed_photos.zip"
        msg = f"–ì–æ—Ç–æ–≤–æ! –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: {stats.get('renamed', 0)} –∏–∑ {stats.get('total', 0)} –ø–∞–ø–æ–∫. –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats.get('skipped', 0)}"
    elif mode == "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ JPG":
        result_filename = "converted_images.zip"
        msg = f"–ì–æ—Ç–æ–≤–æ! –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {stats.get('converted', 0)} –∏–∑ {stats.get('total', 0)} —Ñ–∞–π–ª–æ–≤. –û—à–∏–±–æ–∫: {stats.get('errors', 0)}"
    elif mode == "–í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫":
        result_filename = "watermarked_images.zip"
        msg = f"–ì–æ—Ç–æ–≤–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats.get('processed', 0)} –∏–∑ {stats.get('total', 0)} —Ñ–∞–π–ª–æ–≤. –û—à–∏–±–æ–∫: {stats.get('errors', 0)}"
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫
    result_path = os.path.join(DOWNLOADS_DIR, result_filename)
    with open(result_path, "wb") as f:
        f.write(st.session_state["result_zip"])
    file_size_mb = os.path.getsize(result_path) / (1024 * 1024)
    st.success(msg)
    if file_size_mb > 100:
        st.markdown(f"[üì• –°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤]({result_path}) (—á–µ—Ä–µ–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É, {file_size_mb:.1f} –ú–ë)")
        st.info("–ï—Å–ª–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ. –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ download_button –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.")
    else:
        with open(result_path, "rb") as f:
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤",
                data=f.read(),
                file_name=result_filename,
                mime="application/zip"
            )
    with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏"):
        st.text_area("–õ–æ–≥:", value="\n".join(st.session_state["log"]), height=300, disabled=True)
        st.download_button(
            label="üìÑ –°–∫–∞—á–∞—Ç—å –ª–æ–≥ –≤ .txt",
            data="\n".join(st.session_state["log"]),
            file_name="log.txt",
            mime="text/plain"
        )
